version: 2.1

jobs:
  install:
    docker:
      - image: circleci/node:14.2.0
    environment:
      TERM: xterm
    working_directory: ~/app
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps
            - v1-deps-{{ checksum "yarn.lock" }}
      - run:
          name: Installing dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Running linters
          command: yarn lint
      - save_cache:
          key: v1-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
            - packages/common/node_modules
            - packages/service/node_modules
            - packages/ui/node_modules
            - packages/ui-common/node_modules
            - ~/.cache/yarn

  test:
    docker:
      - image: circleci/node:14.2.0
    environment:
      TERM: xterm
    working_directory: ~/app
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps
            - v1-deps-{{ checksum "yarn.lock" }}
      - run:
          name: Build [common] dependencies
          command: yarn -s build:common
      - run:
          name: Running unit tests
          command: |
            TEST_PATHS=$(circleci tests glob "packages/*/**/*.spec.js" | circleci tests split --split-by=timings)
            yarn test:ci ${TEST_PATHS}
      - store_test_results:
          path: .tmp/test-results
      - run:
          name: Upload code coverage
          command: |
            bash <(curl -s https://codecov.io/bash)

  build-service:
    docker:
      - image: circleci/node:14.2.0
    environment:
      TERM: xterm
      SENTRY_PROJECT: boilerplate-monorepo-service
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Check if the [service] needs built
          command: ./.circleci/exit-untouched.sh packages/common packages/service
      - restore_cache:
          keys:
            - v1-deps
            - v1-deps-{{ checksum "yarn.lock" }}
      - run:
          name: Build the [service]
          command: yarn -s build:service

  build-ui:
    docker:
      - image: circleci/node:14.2.0
    environment:
      TERM: xterm
      SENTRY_PROJECT: boilerplate-monorepo-ui
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Check if the [ui] needs built
          command: ./.circleci/exit-untouched.sh packages/common packages/ui-common packages/ui
      - restore_cache:
          keys:
            - v1-deps
            - v1-deps-{{ checksum "yarn.lock" }}
      - run:
          name: Build the [ui]
          command: yarn -s build:ui

  deploy-service:
    docker:
      - image: circleci/node:14.2.0
    steps:
      - checkout
      - run:
          name: Check the [service] needs pushed
          command: ./.circleci/exit-untouched.sh packages/common packages/service
      - run:
          name: Deploy [service] to Heroku
          command: |
            git push --force https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME_SERVICE.git master

  deploy-ui:
    docker:
      - image: circleci/node:14.2.0
    steps:
      - checkout
      - run:
          name: Check the [ui] needs pushed
          command: ./.circleci/exit-untouched.sh packages/common packages/ui-common packages/ui
      - run:
          name: Deploy [ui] to Heroku
          command: |
            git push --force https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME_UI.git master

  release:
    docker:
      - image: circleci/node:14.2.0
    environment:
      TERM: xterm
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Check if the a release is needed
          command: ./.circleci/exit-untouched.sh packages/
      - restore_cache:
          keys:
            - v1-deps
            - v1-deps-{{ checksum "yarn.lock" }}
      - run:
          name: Release a new version
          command: yarn -s semantic-release

workflows:
  version: 2
  features:
    jobs:
      - install
      - test:
          requires:
            - install
      - build-service:
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - build-ui:
          requires:
            - test
          filters:
            branches:
              only:
                - master
      # - approve-deployment-service:
      #     type: approval
      #     requires:
      #       - build-service
      # - approve-deployment-ui:
      #     type: approval
      #     requires:
      #       - build-ui
      - deploy-service:
          requires:
            - build-service
          filters:
            branches:
              only:
                - master
      - deploy-ui:
          requires:
            - build-ui
          filters:
            branches:
              only:
                - master
      - release:
          requires:
            - install
          filters:
            branches:
              only:
                - master
